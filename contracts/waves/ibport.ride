{-# STDLIB_VERSION 4 #-}
{-# CONTENT_TYPE DAPP #-}
{-# SCRIPT_TYPE ACCOUNT #-}


#----Constants----
let NONE = 0

func getIntegerByKey(key: String) = {
    match (getInteger(this, key)) {
        case v:Int => v
        case _ => NONE
      } 
}
func getBytesByKey(key: String) = {
    match (getBinary(this, key)) {
        case v:ByteVector => v
        case _ => base64'0'
    }
}
func getStringByKey(key: String) = {
    match (getString(this, key)) {
        case v:String => v
        case _ => ""
    }
}

let AssetIdKey = "asset_id"
let FirstRqKey = "first_rq"
let LastRqKey = "last_rq"
let NebulaAddressKey = "nebula_address"

let nebulaAddress = addressFromStringValue(getStringByKey(NebulaAddressKey))
let assetId = fromBase58String(getStringByKey(AssetIdKey))
let firstRq = getStringByKey(FirstRqKey)
let lastRq = getStringByKey(LastRqKey)

func getNextRqKey(id: String) = "next_rq_" + id
func getPrevRqKey(id: String) = "prev_rq_" + id
func getRqAmountKey(id: String) = "rq_amount_" + id
func getRqReceiverKey(id: String) = "rq_receiver_" + id
func getRqStatusKey(id: String) = "rq_status_" + id
func getRqTypeKey(id: String) = "rq_type_" + id

func getRqStatus(id: String) = getIntegerByKey(getRqStatusKey(id))
func getNextRq(id: String) = getStringByKey(getNextRqKey(id))
func getPrevRq(id: String) = getStringByKey(getPrevRqKey(id))


#----Statuses-----
let NEW = 1
let COMPLETED = 2

#----Actions------
let MINT = 1
let CHANGESTATUS = 2

#----Types--------
let ISSUETYPE = 1
let BURNTYPE = 2

func mint(rqId: String, amount: Int, receiver: Address) = {
  # mint always overrides request "request type" to NEW
  # changeStatus(confirmation) overrides "request type" to COMPLETED
  if (getRqStatus(rqId) == NONE)
  then
    [
      StringEntry(FirstRqKey, if (firstRq == "") then rqId else firstRq),
      StringEntry(LastRqKey, rqId),

      StringEntry(getNextRqKey(lastRq), rqId),
      StringEntry(getPrevRqKey(rqId), lastRq),

      IntegerEntry(getRqAmountKey(rqId), amount),
      IntegerEntry(getRqStatusKey(rqId), COMPLETED),
      IntegerEntry(getRqTypeKey(rqId), ISSUETYPE),
      Reissue(assetId, amount, true),
      ScriptTransfer(receiver, amount, assetId)
    ]
  else
    [
      IntegerEntry(getRqAmountKey(rqId), amount),
      IntegerEntry(getRqStatusKey(rqId), COMPLETED),
      IntegerEntry(getRqTypeKey(rqId), ISSUETYPE),
      Reissue(assetId, amount, true),
      ScriptTransfer(receiver, amount, assetId)
    ]
}

func confirmRequest(rqId: String) = {
  [
    IntegerEntry(getRqStatusKey(rqId), COMPLETED)
  ]
}

@Callable(i)
func attachData(v: ByteVector, vPulseId: Int) = {
  if (i.caller != nebulaAddress)
    then throw("invalid sender")
  else
    let action = toInt(v.take(8))
    let rqId = toBase58String(v.drop(8).take(32))

    if action == MINT then
      let amount = toInt(v.drop(8+32).take(8))
      let receiver = addressFromStringValue(toBase58String(v.drop(8+32+8)))
      mint(rqId, amount, receiver)
    else if action == CHANGESTATUS then
      let newStatus = toInt(v.drop(8+32))

      if newStatus == COMPLETED then
        confirmRequest(rqId)
      else throw("input status is invalid")
    else throw("invalid action")
}

@Callable(i)
func createTransferUnwrapRq(receiver: String) = {
    let pmt = value(i.payments[0])
    let rqId = toBase58String(i.transactionId)
    if (pmt.assetId != assetId) 
        then throw("invalid asset in payments")
    else {
            [ 
                StringEntry(FirstRqKey, if (firstRq == "") then rqId else firstRq),
                StringEntry(LastRqKey, rqId),

                StringEntry(getNextRqKey(lastRq), rqId),
                StringEntry(getPrevRqKey(rqId), lastRq),
            
                IntegerEntry(getRqAmountKey(rqId), pmt.amount),
                IntegerEntry(getRqStatusKey(rqId), NEW),
                IntegerEntry(getRqTypeKey(rqId), BURNTYPE),
                StringEntry(getRqReceiverKey(rqId), receiver),
                Burn(assetId, pmt.amount)
            ]
    }
}
